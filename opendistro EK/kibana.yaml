---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kibana
  namespace: cocktail-addon
  labels:
    app: kibana
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kibana
  namespace: cocktail-addon
  labels:
    app: kibana
rules:
- apiGroups: ['extensions']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - elasticsearch-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: kibana
  name: kibana-rolebinding
  namespace: cocktail-addon
roleRef:
  kind: Role
  name: kibana
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: kibana
  namespace: cocktail-addon
---
apiVersion: v1
kind: Secret
metadata:
  name: kibana
  namespace: cocktail-addon
type: Opaque
data:
  kb-username: a2liYW5hc2VydmVy
  kb-password: a2liYW5hc2VydmVy
  kibana.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lVQzVCdFVQRjZIdisybWFRNkdFeDBnTWtSaytFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VURVBNQTBHQTFVRUF3d0dVbTl2ZEVOQk1CNFhEVEl3TURneU5qQXlNek13TVZvWERUTXdNRGd5TkRBeQpNek13TVZvd0VURVBNQTBHQTFVRUF3d0dhMmxpWVc1aE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXRYaGRSRjlWTVI1Qmp6bTc1VEFPL29IZjVYSGdEdUp6ZnQyMjkyQ1NwVVllc0VOMFBYWDkKNThEYkR0bms3elN5N29rZjNzZEVrazhNRE0zQ1dWYy9hZ3NsN2RibllHSituSE51enp5d0d2VkRNWGhCNDRIWgpxNEFqdVFQeURoZlhsZHkzSmZTc1NvYzRzUXdncEIzelltZGUvZkI0ZFZERTJSTnJxQWtBV3BOQnpyK1N1dkJ6CkFxWnhQd2lnUVlhQmdSQ05BOXUrMVdndTdwL3cwOHBhaVVsY2JpVjhhYTh3bHRRTmh0eGIxWmRsZWloSTgwVzMKTkFIVGwxSG5FSVNaNVNSblBSU0p5eUxtZkNYL0wrbE0xNVA0N3NOYnRvVWZMT1MvaThHMS9BSFVxL09ZNGh1SgpidXFSelVibjRMMklZWTBrQVRIRzQvRWk2NzFjN2RSVFR3SURBUUFCbzRHbk1JR2tNQWtHQTFVZEV3UUNNQUF3CkRnWURWUjBQQVFIL0JBUURBZ1R3TUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQm8KQmdOVkhSRUVZVEJmZ2dsc2IyTmhiR2h2YzNTQ0ZXdHBZbUZ1WVM1amIyTnJkR0ZwYkMxaFpHUnZib0laYTJsaQpZVzVoTG1OdlkydDBZV2xzTFdGa1pHOXVMbk4yWTRJVWFHUmpZWEprTFd0aUxtRmpiRzkxWkM1eWRXNkhCSDhBCkFBR0hCR1UzUlc0d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIb25pYWZrL0Qrc1B4N1VOUlBXYjFQVllsODkKTEVkNnFBSXFHajlYdGRtYTVNSkdvWUppTkl6ZG1Lb2pRSFFZcmVOdGUxUmplUHk2SUYvQm9jQ0piVHorRndyOAo5L0pDOTZPL1NURkRHbHVGeDUwaDhEaTdNdExYbXFMVDVJdUxhOU80RFZUS0xGQ3RFUWNiak1ZelAvd1pZdGt6CjJyOWRFc1dYNStkMGFYZUVCVzdiUm9XYnFuTGZWTW9oMmZDZWtnUHVXMU1BRi80VEFyMUphbHZtaHVpWkFzby8Kb0VTbk56bmFhZm42NngzYmFOYUVxeU1GS25WMUwxbHcrQ0huMnJHa2pEM2ZaNU9JRVVwMWhHZEVnbzBjSGJKcQpKRGIvRVdHcVBvWGtFMFA4VklMM1IwdWFXT1VNeVZuSTN1SHBrdWYxVUlpanZRcjF1KzdYeHJ5b0laRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzBEQ0NBYmlnQXdJQkFnSVVjWkltSFlnQTZQeFRUVG1ndFA2MW1EeHVLaFV3RFFZSktvWklodmNOQVFFTApCUUF3RVRFUE1BMEdBMVVFQXd3R1VtOXZkRU5CTUI0WERUSXdNRGd5TmpBeU16QXdPVm9YRFRNd01EZ3lOREF5Ck16QXdPVm93RVRFUE1BMEdBMVVFQXd3R1VtOXZkRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBd2Z4Zld3eXpxRVdRWVZoSUFwbitVVVVHWG4rUWduYkJiUFNwRGN3QTFINVRDT0VBQi84TQpMay9MTGpMSlZ5QWpGWE00SWE4QXVUTXJFR0dQbHlPb0ZZVERmaXp1NVN3b1FnUTBvdS9mQi9BOXV0dkNVSmZhCmtKaWxtcW1JcTV4eWRLUjNQQlBOWWVKQ0tTTmx1SDdVcnVWNHgwMXBOMkprM1dPZVhDRFEwS2w3UGw2Zk1LejQKalhjSFB3MzJCRUN6S1h1UFJGRGozejdsTmxZdWQvUHVLQVB3ekM2dGRFOVArUUNGdXV3WkZEYnc3WEJWWU9RMgphODNHeXB3dUFLVXd6cWw3amV1NXJCSWl2VzBaQjFFbXZRcVc3bVN2SEFMVmVrQlV3a0FmNXJacXlUc2FNb01HCnp4MVBGb1pRYnZmNlI5bVR3clNJUWFVdXhPSGd3d2FZV3dJREFRQUJveUF3SGpBTUJnTlZIUk1FQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJoakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZW5qKzZha3FGZXgxSHJvOApmSzFxQjA3U2dWMmFXQWdWR0srNk5BdW8zR2UzMzRCOE0raDlSOVI3cXVrMFZJdjYzRTBZTGsxdUVGUEpMUzBsCjVhZ0tTYmllR2lTYUgyMGZrdy9hNS9HZ01tblc0ZjVvUUF3MnFPOUl0R1ZldHdjWW5KM1NTbkdubUJVQWRTTU4KY2haRlA1dE9td1p6RUlNZ05aMWJLSitBNVJ0QjF6SC9ZU25VZ3lia1RwOUcyMnMwQUJqSytVM1d2b2RuS1hCOAptUWdocDRnYXZLUFRHNjN2WkQxZE5wSnVrWG1Kckc1dzhZTUFybjdwSXVDbEE5YUpzRHM1M1UxUjhYRE44ZmZTCitwK1dzYzBxMnFnajVaTWlXeW05cHBSN0I0MWI5V1d5OTNLSmg0ZTRSRGhMeldTOXlGWExGb0N2MGFtcnIwUnoKUHhSbUFnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  kibana.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzFlRjFFWDFVeEhrR1AKT2J2bE1BNytnZC9sY2VBTzRuTiszYmIzWUpLbFJoNndRM1E5ZGYzbndOc08yZVR2TkxMdWlSL2V4MFNTVHd3TQp6Y0paVno5cUN5WHQxdWRnWW42Y2MyN1BQTEFhOVVNeGVFSGpnZG1yZ0NPNUEvSU9GOWVWM0xjbDlLeEtoeml4CkRDQ2tIZk5pWjE3OThIaDFVTVRaRTJ1b0NRQmFrMEhPdjVLNjhITUNwbkUvQ0tCQmhvR0JFSTBEMjc3VmFDN3UKbi9EVHlscUpTVnh1Slh4cHJ6Q1cxQTJHM0Z2VmwyVjZLRWp6UmJjMEFkT1hVZWNRaEpubEpHYzlGSW5MSXVaOApKZjh2NlV6WGsvanV3MXUyaFI4czVMK0x3Ylg4QWRTcjg1amlHNGx1NnBITlJ1Zmd2WWhoalNRQk1jYmo4U0xyCnZWenQxRk5QQWdNQkFBRUNnZ0VBWjFhTGhndmpyM3pUU0lSUUEwdEN2cHVtckRvVXBXVSs3OWZDQVV6MU5UaWcKOFM3NFdxZCtWeUx6bTVscFRPNXRsbmh2dGFVejN6MDBWM1kwWGp2WTJNSlFid2daNmtFc2FGc3pscit3YVNtUgpnZkpCVXhUMnB6cnBITXFxWkd3ZlVDL0grODFBNzQvaE1MRC9SWFhveXZpaWwya0FyNDIzQ3dhTUg3eEFmMUsyCmZuQWxWNndFbC9rdFNSUWdXejEzRkVkVFdUdi9EQWVxR050NUJpNkQvL2RkT0RKZEl2QVh3MFFHbFJPTW1CZnIKSTFJb3JIQUhhSVBYendhbXlobk13d0hYbmltMEdvQkU3bEV2aUlGdEZBb2ZnRXNLd2p0UDJWTjg5MFd4Mi8vZQp0VEQyaTd2eExFcXBaT25TLzZnVGdMSjF2Z3lqRCtWY0R6SEdwQUhXUVFLQmdRRGFlTXQ4RWU1dWtPNnFSbjJHCjVUVjh5UTZjeU56T29hdHNTaHJLZnlEejh6dVVqRUZUZ2NLN1J1dm5HbXdjby9DNHpGdVBobXB3QmdPWHVDbnoKeFdlUkdPQngyZ2hrZDJlQnNDSDR0Q055M29wUGJSdTY0VEFxMVl6b0dCcFFzcGU5eE5WdkdOYjRlMUdGUzIycgprTjRBZzAwUi9PR2lnUFYvajEwTTJNdEdRd0tCZ1FEVXBHL0JOK1hJRFdzaUd3MFhtK0R4dUM3aWovTVZQbVJyCjd3ODA2cVNjaWxlTjc0RG44MDFhSUFkQXBha0ladWZLZ25jeTdwU1NCeDQ1akJWT3FIUm42OVJFTUp0TnZnMmEKWGNnQlFqTlkzWDYrckJ5b3p5VGVQN2ttV0hpK0h0K0IwcWFyd2NtYjBNZVpwektUVmh1bmFyK3JaTk11SDZWMApXdWpPWG1iOEJRS0JnUUNCN3ErT3BaZDVtS2JwREMxaHlmWXF0ZVVENkE0eXNrSWlrRndvckwwcmVUQ3BJMVZDCjFmeTdwdTFzTC9HMmd1WUs4amRPUC9JVGwvQVJEczJjbG40RzlKV2dBTDFYQ3hDN044YXNoRzVFeGdmYVB4anIKNXp2ZmJjeDB5TWoxejVHaG9td1J1K00yT3hsN3ZpV0drUTBIbnc5Nk1EejlpZGI0TzRwcXRwRUd3d0tCZ0dUaApybk5JaGFjblZwQlRyUjVxUVluc0M3SkpBTll2UjQwOVdVV05uSkwzdnhvRGFuQ2dxUzM4eS9RTG8rbnNpRU0zCktqM3JtbWk5SDhYRmc4WlJmUWhnaGMva0Q0b09oSDJieUd0d2NOUFVJWEZzVGh4NFNkRjNBZXdEUlNWTm1GUUwKRUMra1BIWEQweTQrZUd3V0NnQ2ZVRmVMK2ZTRDV3Y1FxaXBkOXhYUkFvR0FFa1Y0VStScU02WVgwWjV3K2hwWAo1UUlZeFhxdHRFOU1UTTk0czRKTU13VXB1eGVrREZOQ3R1VWFTWWVmUUw2VTVGRGhqL1hoV1l5U0MybUJnYUR0CnMrSmZTRTNzNEdCT2c3dVYxaWlkeUZzZW1mMFArK2wvdk5tWVg5Z0h1ZHczK0NqYnVGYkJ3dnErS2RKNGNLdVgKZHBZdFRTM2tzVnpLcXcvT216b2x2RHc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  tls.crt: 
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBd0NCNWFXQ3hmN1FzL0tuekxxcW45QnR4REw5QTBZYnVCSW9QYUsyYkNmSkFkWnJyCkg0dE9ERUh6WXlEdDdBczZqSDR2Nm14K1d5RGozbTU0alp6YW5BTG4ya1l3ZFY2UERVdktOWWRqdmI2MENUcXgKNldhMDlaNndtT2lYRklpVFZUVzJmUWoyTWVaUnlnNHh0allkQnpNK0FRN1BZUGJIcTQwOUNoMVM2OXE3QnRYKwpNang4dHYwT3d2WjBJNlFVaEV4Mmpad3l1NjZHckxLdTk5UEU2eWc1czlmb1dTcFV2SjI4ckpLTnN5OTgzRlNzCllzNDg4cUhPTUdLMWgxRzJ5cHJPcEttUHpIRnFKc2l5cndWZndZZlNwY21xaFZzNVZ0WlVQQVBOTWVYdjhWSnEKUlpCaFcyeWg4MmRYS2dRMk8xNmhJZ1lWRjVJZUtKZU96alhYL1FJREFRQUJBb0lCQUFHUGNmVDdZazJuZExNVApuVVE4Z2hNdk10Nlg0Z3FobGliR3lVUEFIekY0UEhKSUVROUhSaG0rNGw5a2VkSXdNQ2hLY1JDdUUyT2hrNEF2CnRQNXZidTRUN3ZhY21kR21OREszTWh2M3JzVndlazFWNHZLQ2tVY3FaQVJGNVU0M0lyMHZLNzE5dUdRazJ2YXgKWVZGNXhJZ1ZzRFA1ZnhFcVIrcGFnZ3VtTzlGckNIbXJScDFuSUFkWGJiNXpmekM4eklBdG1XZkZ5bWVmVTdVcAo5OG8wVXkrNjZ3T2htMU9qaStvM2g0RGtEeTgzL2dvNW5lcmFmSDRaMkc5YmlZRTFqZnB1Y1l6YXJFcjFCVG9FCmhHV1dmYVRXQ2RYQ3RKS1JxTHU1eVFMc1AwL2JPb0xNUDRQWTBqSEtGL0xib1JUemFjVTJ6NDd6b2hHT1N4UmIKa21wdlpXa0NnWUVBOUsxN0svK05hNENpK3RrZjM0OWNMcEdzQ2NYckNpandQcm5uNlpqdHRxUU5nbXc4UGgvZAppMnlRTTREdDJGTEE1cER2WEN4RklJZjRhRzNnN0lFYjN4NlVUeVVMNXlCWjZTVFkrVmRQUFJyY2Q1c3hsV013CnRSdVZZL1lrWUFneHV4WXAxeG9MVWExSFFTZWlJZDRqSzVtWEpJWWVJdkJqS1BBcW1JQWV0WlVDZ1lFQXlRUjIKT0hDZFRkVGFzckdSZmZzWVNZVmxsZGhQeTZxUGQ3Q1N3bWJtV1VpZUJuODVGYmxyeUpXemZMUVhKUkh5bkhGUgpTTVdzTFJhd1dyaE10QnFBeU9OKzN4SFlnZ0xndEZWamozSjFzWGJZUHFQaTFhSCttaXZhZnlTdVg4UVQvQmFPCkIrR2wvUDAvbU5wbkZmNlFmZUtOUnhnbGdFK201WVFiVGhSMnJza0NnWUVBMTh1OXE2TjdUZ29wTkVhVk51NVEKcGYzeWxyZ0pRVyt6M0E3SXZKMFZZeFV6bVFqdTVQZmp4SmtlWVY1ZjUzK3RCRzFsdm95STkxVVV3TDNRTjZiegpOd2pZVXlsZ1l4dUVVUDBmcEdIZDBBM0Z6bk9BK3JsOTl1MTZCNnpLaml3TCtHNW12b0VJNUtPSUNhM3o4QnprCk5nc0RZOElxQ0RTdHNDaUoyUEIrcFRVQ2dZRUFvSlE0NEZOTnhmd1FqSWorNGJXeExDSXRDV3ZZS3FsZ25FdG8Kb1hWVDgrVG5uK2NIc2d3Q1J5VVhVYm9IZHl5RU0yYnVlUVMzeXZrQi9pYVYxNVlJWlBJZXlwSFY4OTNhcFJSRgpTVFUxUVlQZnNRSjRWUkpvY2I0d2VEclVOVnBNWUtlZjVEbmt3Rm1KOFZBZTQxb05FUkxtcXZGbUc3OEZZdm1LClduQk1jc2tDZ1lFQW53Wkl2MEY1S25SRjA0YkJTUzZpMU9BK3JuZHd4ZlEzSWNrTmdrLzR3S3l4NElZL21HWjcKYnlvSGRmZ0Vtc1pGRFEyUWZYSXJxOHZRRFVGcFlJN2EvSDlWOWZ3MlFjZzV1MUxrd3M5N2xBVHgrNmNOaTQ0VQp6OVBqUHFKaEwybTl4ZVpuc1dKR2FZQ2FOS0t2bWFzZm1LWjJuVmltOVN6SldTVDFjNW5nTmQ4PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMwRENDQWJpZ0F3SUJBZ0lVY1pJbUhZZ0E2UHhUVFRtZ3RQNjFtRHh1S2hVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VURVBNQTBHQTFVRUF3d0dVbTl2ZEVOQk1CNFhEVEl3TURneU5qQXlNekF3T1ZvWERUTXdNRGd5TkRBeQpNekF3T1Zvd0VURVBNQTBHQTFVRUF3d0dVbTl2ZEVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXdmeGZXd3l6cUVXUVlWaElBcG4rVVVVR1huK1FnbmJCYlBTcERjd0ExSDVUQ09FQUIvOE0KTGsvTExqTEpWeUFqRlhNNElhOEF1VE1yRUdHUGx5T29GWVREZml6dTVTd29RZ1Ewb3UvZkIvQTl1dHZDVUpmYQprSmlsbXFtSXE1eHlkS1IzUEJQTlllSkNLU05sdUg3VXJ1VjR4MDFwTjJKazNXT2VYQ0RRMEtsN1BsNmZNS3o0CmpYY0hQdzMyQkVDektYdVBSRkRqM3o3bE5sWXVkL1B1S0FQd3pDNnRkRTlQK1FDRnV1d1pGRGJ3N1hCVllPUTIKYTgzR3lwd3VBS1V3enFsN2pldTVyQklpdlcwWkIxRW12UXFXN21TdkhBTFZla0JVd2tBZjVyWnF5VHNhTW9NRwp6eDFQRm9aUWJ2ZjZSOW1Ud3JTSVFhVXV4T0hnd3dhWVd3SURBUUFCb3lBd0hqQU1CZ05WSFJNRUJUQURBUUgvCk1BNEdBMVVkRHdFQi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWVuais2YWtxRmV4MUhybzgKZksxcUIwN1NnVjJhV0FnVkdLKzZOQXVvM0dlMzM0QjhNK2g5UjlSN3F1azBWSXY2M0UwWUxrMXVFRlBKTFMwbAo1YWdLU2JpZUdpU2FIMjBma3cvYTUvR2dNbW5XNGY1b1FBdzJxTzlJdEdWZXR3Y1luSjNTU25Hbm1CVUFkU01OCmNoWkZQNXRPbXdaekVJTWdOWjFiS0orQTVSdEIxekgvWVNuVWd5YmtUcDlHMjJzMEFCaksrVTNXdm9kbktYQjgKbVFnaHA0Z2F2S1BURzYzdlpEMWROcEp1a1htSnJHNXc4WU1Bcm43cEl1Q2xBOWFKc0RzNTNVMVI4WEROOGZmUworcCtXc2MwcTJxZ2o1Wk1pV3ltOXBwUjdCNDFiOVdXeTkzS0poNGU0UkRoTHpXUzl5RlhMRm9DdjBhbXJyMFJ6ClB4Um1BZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana
  namespace: cocktail-addon
  labels:
    app: kibana
data:
  kibana.yml: |-
    server:
      name: kibana
      host: "0.0.0.0"
      ssl:
        enabled: true
        key: /usr/share/kibana/config/tls.key
        certificate: /usr/share/kibana/config/tls.crt
    elasticsearch:
      requestTimeout: 360000
      hosts: https://elasticsearch.${NAMESPACE}.svc:9200
      username: ${KIBANA_USERNAME}
      password: ${KIBANA_PASSWORD}
      requestHeadersWhitelist: ["Authorization", "securitytenant", "security_tenant"]
      ssl:
        certificateAuthorities: /usr/share/kibana/config/ca.crt
        verificationMode: none
        key: /usr/share/kibana/config/kibana.key
        certificate: /usr/share/kibana/config/kibana.crt
    opendistro_security.allow_client_certificates: true
    opendistro_security.cookie.secure: false
    opendistro_security.auth.type: openid
    opendistro_security.openid.connect_url: https://hdcard-sso.acloud.run/auth/realms/paas-admin/.well-known/openid-configuration
    opendistro_security.openid.client_id: kibana-oidc
    opendistro_security.openid.client_secret: 39648dcc-5c7b-4e38-8d0c-391b8b5e41f4
    opendistro_security.openid.logout_url: https://hdcard-sso.acloud.run/auth/realms/paas-admin/protocol/openid-connect/logout
    opendistro_security.openid.base_redirect_url: https://hdcard-kb.acloud.run/
    opendistro_security.openid.header: Authorization
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: cocktail-addon
  labels:
    app: kibana
spec:
  type: ClusterIP
  selector:
    app: kibana
  ports:
  - name: https
    port: 443
    targetPort: https
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  labels:
    app: kibana
  name: kibana
  namespace: cocktail-addon
spec:
  #ingressClassName: "nginx"
  rules:
  - host: "hdcard-kb.acloud.run"
    http:
      paths:
      - backend:
          serviceName: kibana
          servicePort: https
        path: /
  tls:
  - hosts:
    - "hdcard-kb.acloud.run"
    secretName: kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: cocktail-addon
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: opendistroforelasticsearch/opendistroforelasticsearch-kibana:1.9.0
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KIBANA_USERNAME
              valueFrom:
                secretKeyRef:
                  name: kibana
                  key: kb-username
            - name: KIBANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kibana
                  key: kb-password
          resources:
            limits:
              cpu: 2500m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 512Mi
          #livenessProbe:
          #  initialDelaySeconds: 60
          #  timeoutSeconds: 10
          #  httpGet:
          #    path: /status
          #    port: 5601
          #readinessProbe:
          #  initialDelaySeconds: 60
          #  timeoutSeconds: 10
          #  httpGet:
          #    path: /status
          #    port: 5601
          ports:
            - containerPort: 5601
              name: https
          volumeMounts:
            - mountPath: /usr/share/kibana/config/kibana.yml
              name: config
              subPath: kibana.yml
            - mountPath: /usr/share/kibana/config/kibana.crt
              name: certs
              subPath: kibana.crt
            - mountPath: /usr/share/kibana/config/kibana.key
              name: certs
              subPath: kibana.key
            - mountPath: /usr/share/kibana/config/ca.crt
              name: certs
              subPath: ca.crt
            - mountPath: /usr/share/kibana/config/tls.crt
              name: certs
              subPath: tls.crt
            - mountPath: /usr/share/kibana/config/tls.key
              name: certs
              subPath: tls.key
          ports:
            - containerPort: 5601
              name: https
      serviceAccountName: kibana
      volumes:
        - name: config
          configMap:
            name: kibana
        - name: certs
          secret:
            secretName: kibana
      tolerations:
        - effect: NoSchedule
          key: node-type
          operator: Equal
          value: management
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-type
                    operator: In
                    values:
                      - management
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchLabels:
                    app: elasticsearch
                    role: client
      restartPolicy: Always
