---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: elasticsearch
rules:
- apiGroups: ['extensions']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - elasticsearch-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch-rolebinding
roleRef:
  kind: Role
  name: elasticsearch
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: elasticsearch
  namespace: monitoring
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch
  namespace: monitoring
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROekNDQWgrZ0F3SUJBZ0lKQUpMQ0Z3ZXFuZjg2TUEwR0NTcUdTSWIzRFFFQkN3VUFNQkV4RHpBTkJnTlYKQkFNTUJsSnZiM1JEUVRBZ0Z3MHlNVEEyTWpFd01EVTRNalphR0E4eU1USXhNRFV5T0RBd05UZ3lObG93RHpFTgpNQXNHQTFVRUF3d0VibTlrWlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTys0CjI4L0M3dWdBOGw1bXVLY2QwOUJ2dWVCa1ZvOWdwQWxIOHlNakxnUnRueGRVazU0Vncrem5hb0djZFJaZ1JDTHgKTWpXbU53RmprTGhzU1JDMjk5Tm1UdEFwQ3VKWmw3eUorc1YxM3BrZVV5UVIxSFhBS2tyMGE1UkFxeUdSRWJVNwp3UXdhWFRKK0IwVkdHRHpDNENwcUpCREg2MUpHMCtYODFDUWtTNFgrUmw0Vk5aL0JwU0N4SnRUSFFjMjRYcVBuCmNBKy9TSFpGeE9wdmN1MjhyL0VSNXp5SmU3RmhqeitwYlErM2xuQXg2ZUJWOENCRjk1OVJ5NUdxbG1VR1FTUkMKQXB5V3dFcXRzOVo4Wi9qdGtEV2Q0VVFYWWdrYmEyblJONzQ2VHplVHFKSk5peFF5WGZWcC95VCtxOHZPNHFkeQp1Z245d3RGQ1NjTEt6SlRIZjhzQ0F3RUFBYU9Ca1RDQmpqQUpCZ05WSFJNRUFqQUFNQTRHQTFVZER3RUIvd1FFCkF3SUU4REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd1VnWURWUjBSQkVzd1NZSUoKYkc5allXeG9iM04wZ2hobGJHRnpkR2xqYzJWaGNtTm9MbTF2Ym1sMGIzSnBibWVDSEdWc1lYTjBhV056WldGeQpZMmd1Ylc5dWFYUnZjbWx1Wnk1emRtT0hCSDhBQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJVEN5NmR4CjhiVkY4ZVNEMEJ2SzduOVdkNmIwTk93b3hOVnJ5SEY2NEZSOHE1WWRvVTRSRkg5ZStJK29FVEd0bEJlUzRhdk0KYld0Tzk4d0xWVE9zY3Nja0hHNzVQZ2V0UHFoMzFzRy9YeHpmclhEY0oyQjUxM0xlM1gxc3lxTmcvZSsvSUtjKwpCZmZaZzhRd0g1MHhmeHd2RDgwckxDYUhkd0xJVlFlMkppLytHV2Y1OHN2ellzYUdxbHl6dmtVc2hpL3BmRS9CCjhHR0VKMUswZEVOejFOSytMempJdnRuUjNWVjNCemdMWmxlVFRFcHg4a2dPUUVCdHdwRlZJYzJkVnhtdUN3OVgKcHRqdEJveE81M0RDV2RFdmsvUEQ3VEFGUEoxNVBIM3psbTFMUG9DZGxVWDJseDdrUkttd1BNQW9ZRVZCZFpCNAoram9CdTM4QWhYNmFURjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN4ekNDQWErZ0F3SUJBZ0lKQUlXMXlDVFJEODhYTUEwR0NTcUdTSWIzRFFFQkN3VUFNQkV4RHpBTkJnTlYKQkFNTUJsSnZiM1JEUVRBZ0Z3MHlNVEEyTWpFd01EVTRNalphR0E4eU1USXhNRFV5T0RBd05UZ3lObG93RVRFUApNQTBHQTFVRUF3d0dVbTl2ZEVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnVHZTVhS2VBWmFEOTkxMFpzcmFjb2pTUnhIbjFDUFFCQW5FMUt2M2dMWjhiS3pBZ0ZDZ3p0T1RQVmJsMExmelAKbjBLTnlGSFJVek9WVHM3Z29kaGhRZXBFbXlLWGxyVWlZZ05Nb2RQSW5Zb2t6OUMzMjJWYkRramNpY0pPNjBVRQpWc3R4K0NuTU95ZWp0bW96MVpiUmpZK2p0NCtvVEcwamtOZ1NDZm1QWThpdUF6cTdlZFFNQVA5Y085bEdYU3ZCCjhGdHdyL2VVUlNDNHM3TVV6MWVNOFVlcGYyWFNPenRITkVIaHh4TmJTQktEa3p3UUtMTXNsYkJLMXR4ajBrMnkKM1BENXhkTDVEMDJUM0o1MFMyMHowOE51Y0NPcTRYNEppUzl0NFk1SUQxTDNuc2lFWlRZeUQzYkdqUkd1RTlDawpCbmdGRXBDKytBbW9DTWY0U3RIL2dRSURBUUFCb3lBd0hqQU1CZ05WSFJNRUJUQURBUUgvTUE0R0ExVWREd0VCCi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWwvYTdycEJLck1YSWNHNm1rR0lQZ0QvdU9ZbloKaysweXRJL3VXWmNqWnRYczlBQk5qcm8wT2pvSmVHYTZ1NVJoT1BEY0FqOVAyRi9hMWlEZlRlRWl5dS90L1lsVApFaWxkcE0waEVrQitSYUxjOXlWajhvQTI2ay9SdkxhRlV4WHh2bmZsazd6QlUyTS94WkpMeG5pVnQ5cWJoN1k2CjdiUkRsK0IycEMxNWlTamVOZm13dGQwSTQvUjBqTGdrT1ljWHNPcnZVSWcxUWZEVFI4bi9VbE9PbnRGZUFyd0EKR0lnZ2dHM09lTlhQb0Z4MmNPUHFjTU5Yc092TWRQWVBpWlYrRUo3NnFyYmdrOEhmaXdTbHZWancrc1dWOXZrUgo5MC96ai8wU0NjbWs3OEloWExyQkZVVXJBTmN1NkRMSURlWlYrQVczd1NxUjZuNExkcmpHb3RRSElRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRHZ1TnZQd3U3b0FQSmUKWnJpbkhkUFFiN25nWkZhUFlLUUpSL01qSXk0RWJaOFhWSk9lRmNQczUycUJuSFVXWUVRaThUSTFwamNCWTVDNApiRWtRdHZmVFprN1FLUXJpV1plOGlmckZkZDZaSGxNa0VkUjF3Q3BLOUd1VVFLc2hrUkcxTzhFTUdsMHlmZ2RGClJoZzh3dUFxYWlRUXgrdFNSdFBsL05Ra0pFdUYva1plRlRXZndhVWdzU2JVeDBITnVGNmo1M0FQdjBoMlJjVHEKYjNMdHZLL3hFZWM4aVh1eFlZOC9xVzBQdDVad01lbmdWZkFnUmZlZlVjdVJxcFpsQmtFa1FnS2Nsc0JLcmJQVwpmR2Y0N1pBMW5lRkVGMklKRzJ0cDBUZStPazgzazZpU1RZc1VNbDMxYWY4ay9xdkx6dUtuY3JvSi9jTFJRa25DCnlzeVV4My9MQWdNQkFBRUNnZ0VCQUlXYUJEL0ZSM3JiMURoU2pZVHQ5YmZNSE03M2ZOcUpwTUpiYkNGZ0lPeHMKMythVHgzV3FjYmhkdlJraFJveEMrSlowMEdQZ0QvWGhOSzNrQTlDaCtIckVJUmFZV1MyUGV5YWp5N1F6SGUwKwpYbDNTNWhMK0YxUVE1c2dJUnBmOWp0M3Z3SVpyUnhlMTczMW5OR2pndnloRVlYZE14RlRsam9FMktGRkFQU3NlCldIcEkxd25lQXpod0Z3UVMzdTBPUGVDRWlmNG9GNFBlUjdyMVNEY2M5Nmw0TUlza0lOTEtBaFVlbXJVYVM5STUKalBRL1hGZ2dQaW1rZ1ZMekpVMEdFeU1PQ0RtV284MnhYeFUzM0ROOXQ2eHMyOGY2Rk03cFovblZsMmtXeDRMNQp0KzF6WDhjb2pjMW15SUg3WFBmb2p3Z2RMb2Q0R2FmemtaVlk4Mis4SG1rQ2dZRUEvN3BkNjdiY1R1Mkhsc1RWCjJVcGRvdHk3NlJ0eEMxajJvanB3eE9OWW9yaE1Ec09UTG1ZUi91VWlGUFNQM01Mb090VlkxTG03M0p5SytEenkKS1ViempGcDJCdVdwZTU0SjM1aVNkdXlUN29KeklnK0pVeW5Kdk5LODY1K1FiUWhkK0pwMU5SZE91OTJ2NXFBRgpNTk9wNTJJanh0RnJDNVE4cEYvMS9hUzYxVTBDZ1lFQTcvb2lLa1lNL2hFYW5BMm9yVXE4UVhzL0tacmRUb0Q3CjdiMlhqb1RRWURDbWl6US95bHlOeWk3aThBbytJRk5ZMTc2NUFTS0J5bnE2c1g3c3VaSEFscjErdU9NcS9pMHkKS1F1ZVRqNDdwMGNuK0UwSnQ3UGx2dW1GWHNRRUpaeWFYU1phbjJqSjhpSjE0UG0rWWJVVVlvY3lrdFIrNHdCbQppSVlsTjBnSFBYY0NnWUJNUk84aUVBV2czS0xseW9ybEpaTExzZjJ4Um1mdXRIZktacGVmZ1JhOFlTNzk4RUtEClFobjM1YXJHaVRJbTYxS0x5WG1XNkZZcE05OFdya2FqSFBBaVdoQjllaDJVS3N4VERaUVJOL25lMXJVejRXSloKbFVyL3IvSjhhN2lOYkVOcWs5YUZJUkJ3WTJ2RTR0RHBnUmRaVlNIS2VFYnV5eVZTK1BQSzFFaU11UUtCZ0R5VgpPRVRWMUhmYmw0MG9BWnBtRUtxelU1bk1SK3lHc1pNdVZ2R2E1QVEwcEFibWxPZ2dmNGM0V1FCaWhaYWhrLzg3ClhmZEVYK0hmSS95bFgxdmx5T29GUXRXb08vVlpNWjJkR2tVRWZ3alc5T2RCZzUrRjRnMVZaTjhzdXlOSHFzeXoKWHhONVgrb3ArdnBsOGtNMmRNUCsvNnlEeXRqQ0JDQ1pSUkgwdENjM0FvR0FXQmtGUzhNQUtFaHRoekFCaWxjRwozSXhDNmNuK3BTS2s4Vjh3akxncElCbVFzbXltckc1aVhNU3pGV2VSM0hhVG1nM2dvZ1ZieE9iM0pjMWdKcGZiCmtiSTNWZWRPSFdENWdITlYyVXVmYWswdWN5TDZHMVhPRGhUcXJPQkg3bHlGN0pBUVF2c29xM2VwVnpXUVdTTk4KUUZlcXhSa2VKR2tCcGdIeXN6UUNnNFE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  node.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROekNDQWgrZ0F3SUJBZ0lKQUpMQ0Z3ZXFuZjg2TUEwR0NTcUdTSWIzRFFFQkN3VUFNQkV4RHpBTkJnTlYKQkFNTUJsSnZiM1JEUVRBZ0Z3MHlNVEEyTWpFd01EVTRNalphR0E4eU1USXhNRFV5T0RBd05UZ3lObG93RHpFTgpNQXNHQTFVRUF3d0VibTlrWlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTys0CjI4L0M3dWdBOGw1bXVLY2QwOUJ2dWVCa1ZvOWdwQWxIOHlNakxnUnRueGRVazU0Vncrem5hb0djZFJaZ1JDTHgKTWpXbU53RmprTGhzU1JDMjk5Tm1UdEFwQ3VKWmw3eUorc1YxM3BrZVV5UVIxSFhBS2tyMGE1UkFxeUdSRWJVNwp3UXdhWFRKK0IwVkdHRHpDNENwcUpCREg2MUpHMCtYODFDUWtTNFgrUmw0Vk5aL0JwU0N4SnRUSFFjMjRYcVBuCmNBKy9TSFpGeE9wdmN1MjhyL0VSNXp5SmU3RmhqeitwYlErM2xuQXg2ZUJWOENCRjk1OVJ5NUdxbG1VR1FTUkMKQXB5V3dFcXRzOVo4Wi9qdGtEV2Q0VVFYWWdrYmEyblJONzQ2VHplVHFKSk5peFF5WGZWcC95VCtxOHZPNHFkeQp1Z245d3RGQ1NjTEt6SlRIZjhzQ0F3RUFBYU9Ca1RDQmpqQUpCZ05WSFJNRUFqQUFNQTRHQTFVZER3RUIvd1FFCkF3SUU4REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd1VnWURWUjBSQkVzd1NZSUoKYkc5allXeG9iM04wZ2hobGJHRnpkR2xqYzJWaGNtTm9MbTF2Ym1sMGIzSnBibWVDSEdWc1lYTjBhV056WldGeQpZMmd1Ylc5dWFYUnZjbWx1Wnk1emRtT0hCSDhBQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJVEN5NmR4CjhiVkY4ZVNEMEJ2SzduOVdkNmIwTk93b3hOVnJ5SEY2NEZSOHE1WWRvVTRSRkg5ZStJK29FVEd0bEJlUzRhdk0KYld0Tzk4d0xWVE9zY3Nja0hHNzVQZ2V0UHFoMzFzRy9YeHpmclhEY0oyQjUxM0xlM1gxc3lxTmcvZSsvSUtjKwpCZmZaZzhRd0g1MHhmeHd2RDgwckxDYUhkd0xJVlFlMkppLytHV2Y1OHN2ellzYUdxbHl6dmtVc2hpL3BmRS9CCjhHR0VKMUswZEVOejFOSytMempJdnRuUjNWVjNCemdMWmxlVFRFcHg4a2dPUUVCdHdwRlZJYzJkVnhtdUN3OVgKcHRqdEJveE81M0RDV2RFdmsvUEQ3VEFGUEoxNVBIM3psbTFMUG9DZGxVWDJseDdrUkttd1BNQW9ZRVZCZFpCNAoram9CdTM4QWhYNmFURjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN4ekNDQWErZ0F3SUJBZ0lKQUlXMXlDVFJEODhYTUEwR0NTcUdTSWIzRFFFQkN3VUFNQkV4RHpBTkJnTlYKQkFNTUJsSnZiM1JEUVRBZ0Z3MHlNVEEyTWpFd01EVTRNalphR0E4eU1USXhNRFV5T0RBd05UZ3lObG93RVRFUApNQTBHQTFVRUF3d0dVbTl2ZEVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnVHZTVhS2VBWmFEOTkxMFpzcmFjb2pTUnhIbjFDUFFCQW5FMUt2M2dMWjhiS3pBZ0ZDZ3p0T1RQVmJsMExmelAKbjBLTnlGSFJVek9WVHM3Z29kaGhRZXBFbXlLWGxyVWlZZ05Nb2RQSW5Zb2t6OUMzMjJWYkRramNpY0pPNjBVRQpWc3R4K0NuTU95ZWp0bW96MVpiUmpZK2p0NCtvVEcwamtOZ1NDZm1QWThpdUF6cTdlZFFNQVA5Y085bEdYU3ZCCjhGdHdyL2VVUlNDNHM3TVV6MWVNOFVlcGYyWFNPenRITkVIaHh4TmJTQktEa3p3UUtMTXNsYkJLMXR4ajBrMnkKM1BENXhkTDVEMDJUM0o1MFMyMHowOE51Y0NPcTRYNEppUzl0NFk1SUQxTDNuc2lFWlRZeUQzYkdqUkd1RTlDawpCbmdGRXBDKytBbW9DTWY0U3RIL2dRSURBUUFCb3lBd0hqQU1CZ05WSFJNRUJUQURBUUgvTUE0R0ExVWREd0VCCi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWwvYTdycEJLck1YSWNHNm1rR0lQZ0QvdU9ZbloKaysweXRJL3VXWmNqWnRYczlBQk5qcm8wT2pvSmVHYTZ1NVJoT1BEY0FqOVAyRi9hMWlEZlRlRWl5dS90L1lsVApFaWxkcE0waEVrQitSYUxjOXlWajhvQTI2ay9SdkxhRlV4WHh2bmZsazd6QlUyTS94WkpMeG5pVnQ5cWJoN1k2CjdiUkRsK0IycEMxNWlTamVOZm13dGQwSTQvUjBqTGdrT1ljWHNPcnZVSWcxUWZEVFI4bi9VbE9PbnRGZUFyd0EKR0lnZ2dHM09lTlhQb0Z4MmNPUHFjTU5Yc092TWRQWVBpWlYrRUo3NnFyYmdrOEhmaXdTbHZWancrc1dWOXZrUgo5MC96ai8wU0NjbWs3OEloWExyQkZVVXJBTmN1NkRMSURlWlYrQVczd1NxUjZuNExkcmpHb3RRSElRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  node.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRHZ1TnZQd3U3b0FQSmUKWnJpbkhkUFFiN25nWkZhUFlLUUpSL01qSXk0RWJaOFhWSk9lRmNQczUycUJuSFVXWUVRaThUSTFwamNCWTVDNApiRWtRdHZmVFprN1FLUXJpV1plOGlmckZkZDZaSGxNa0VkUjF3Q3BLOUd1VVFLc2hrUkcxTzhFTUdsMHlmZ2RGClJoZzh3dUFxYWlRUXgrdFNSdFBsL05Ra0pFdUYva1plRlRXZndhVWdzU2JVeDBITnVGNmo1M0FQdjBoMlJjVHEKYjNMdHZLL3hFZWM4aVh1eFlZOC9xVzBQdDVad01lbmdWZkFnUmZlZlVjdVJxcFpsQmtFa1FnS2Nsc0JLcmJQVwpmR2Y0N1pBMW5lRkVGMklKRzJ0cDBUZStPazgzazZpU1RZc1VNbDMxYWY4ay9xdkx6dUtuY3JvSi9jTFJRa25DCnlzeVV4My9MQWdNQkFBRUNnZ0VCQUlXYUJEL0ZSM3JiMURoU2pZVHQ5YmZNSE03M2ZOcUpwTUpiYkNGZ0lPeHMKMythVHgzV3FjYmhkdlJraFJveEMrSlowMEdQZ0QvWGhOSzNrQTlDaCtIckVJUmFZV1MyUGV5YWp5N1F6SGUwKwpYbDNTNWhMK0YxUVE1c2dJUnBmOWp0M3Z3SVpyUnhlMTczMW5OR2pndnloRVlYZE14RlRsam9FMktGRkFQU3NlCldIcEkxd25lQXpod0Z3UVMzdTBPUGVDRWlmNG9GNFBlUjdyMVNEY2M5Nmw0TUlza0lOTEtBaFVlbXJVYVM5STUKalBRL1hGZ2dQaW1rZ1ZMekpVMEdFeU1PQ0RtV284MnhYeFUzM0ROOXQ2eHMyOGY2Rk03cFovblZsMmtXeDRMNQp0KzF6WDhjb2pjMW15SUg3WFBmb2p3Z2RMb2Q0R2FmemtaVlk4Mis4SG1rQ2dZRUEvN3BkNjdiY1R1Mkhsc1RWCjJVcGRvdHk3NlJ0eEMxajJvanB3eE9OWW9yaE1Ec09UTG1ZUi91VWlGUFNQM01Mb090VlkxTG03M0p5SytEenkKS1ViempGcDJCdVdwZTU0SjM1aVNkdXlUN29KeklnK0pVeW5Kdk5LODY1K1FiUWhkK0pwMU5SZE91OTJ2NXFBRgpNTk9wNTJJanh0RnJDNVE4cEYvMS9hUzYxVTBDZ1lFQTcvb2lLa1lNL2hFYW5BMm9yVXE4UVhzL0tacmRUb0Q3CjdiMlhqb1RRWURDbWl6US95bHlOeWk3aThBbytJRk5ZMTc2NUFTS0J5bnE2c1g3c3VaSEFscjErdU9NcS9pMHkKS1F1ZVRqNDdwMGNuK0UwSnQ3UGx2dW1GWHNRRUpaeWFYU1phbjJqSjhpSjE0UG0rWWJVVVlvY3lrdFIrNHdCbQppSVlsTjBnSFBYY0NnWUJNUk84aUVBV2czS0xseW9ybEpaTExzZjJ4Um1mdXRIZktacGVmZ1JhOFlTNzk4RUtEClFobjM1YXJHaVRJbTYxS0x5WG1XNkZZcE05OFdya2FqSFBBaVdoQjllaDJVS3N4VERaUVJOL25lMXJVejRXSloKbFVyL3IvSjhhN2lOYkVOcWs5YUZJUkJ3WTJ2RTR0RHBnUmRaVlNIS2VFYnV5eVZTK1BQSzFFaU11UUtCZ0R5VgpPRVRWMUhmYmw0MG9BWnBtRUtxelU1bk1SK3lHc1pNdVZ2R2E1QVEwcEFibWxPZ2dmNGM0V1FCaWhaYWhrLzg3ClhmZEVYK0hmSS95bFgxdmx5T29GUXRXb08vVlpNWjJkR2tVRWZ3alc5T2RCZzUrRjRnMVZaTjhzdXlOSHFzeXoKWHhONVgrb3ArdnBsOGtNMmRNUCsvNnlEeXRqQ0JDQ1pSUkgwdENjM0FvR0FXQmtGUzhNQUtFaHRoekFCaWxjRwozSXhDNmNuK3BTS2s4Vjh3akxncElCbVFzbXltckc1aVhNU3pGV2VSM0hhVG1nM2dvZ1ZieE9iM0pjMWdKcGZiCmtiSTNWZWRPSFdENWdITlYyVXVmYWswdWN5TDZHMVhPRGhUcXJPQkg3bHlGN0pBUVF2c29xM2VwVnpXUVdTTk4KUUZlcXhSa2VKR2tCcGdIeXN6UUNnNFE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  admin.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMyRENDQWNDZ0F3SUJBZ0lKQUpMQ0Z3ZXFuZjg1TUEwR0NTcUdTSWIzRFFFQkN3VUFNQkV4RHpBTkJnTlYKQkFNTUJsSnZiM1JEUVRBZ0Z3MHlNVEEyTWpFd01EVTRNalphR0E4eU1USXhNRFV5T0RBd05UZ3lObG93RURFTwpNQXdHQTFVRUF3d0ZZV1J0YVc0d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNyCjluZTZUY2taNmtrMTZDaEdnTGF0R0RnTEZYYTZLeDJzZzVsTkhKd3ZnMUR6OHNvY0huamROTFhLc3B3TThHaGoKT3ZVNzZsOFZZSUZLTGdrTkFDUHR6NXZYQ2k2b2ZkcmthU1J1U0UvKzB1b0RKOVBKYjJ1N0tReERrRGRVQzF1ZQpvK3RTMlB5Szh6L3owZ2ROMzgrakF0RFMvalY5OUU2ay9ORlhjS1dRNTNSblhIc3JrRmlzSUozYk5KZUV5eHkrCkRmZDY0NGRIRHJVd2FhN242ZC9uSVpUemJXMXRQOEhwaG8yOFZLSVdnUE9LYWhtVVN2UTZGd3pFOElQMXpqMUsKTEVpcnBxbmlDMjdHb1V4MU5VUWxRclZob3ZRaUdBWlZMNzVYNE1WdGdGdWdDMTRPdFB0T2tkMXM2NDdockU0ZApiRVdKa0VXOXVQL0tITCt3V01hREFnTUJBQUdqTWpBd01Ba0dBMVVkRXdRQ01BQXdEZ1lEVlIwUEFRSC9CQVFECkFnVHdNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDbHIyKzkKS1A4Q0JPZU00T2JKN0FSRXNLc2ZwNk9xWFRta0JwQXJaWEpQbjg0bUJZN1lHV2JFb2JjS2FXcWVFcDNvMEhOTgpLd2IvbndpYjZNclV3QW5CQVF0S1lZaEZpVXRCdXdnMUFsNFd0Q21DYmhUMjFlQmw5Ym96cEgxNGE1Wkd3NWpnCnpnY2hwWWNoMEU4cERXeHl4dFJRTzNIY3IreHdkYlk0eVNZWVJ2YkxzRkRiazVPVm1RMHRXYTBxckE3SXlQMGsKNU85TUk1SncwNFRrT0Vab3FoSUZBZVpHYXNDQnNhTllKYlI3bWVZMVhkdndFUHR1R3A5NnBXSG5ZdEhXaTR2cApKT2pWVFhwMFlYa1g4SzhMcjlja1dBcUxZQ3hKZXdWMS9nTTg0bG11ZUlsZWFiUzE4OXFUempnditVYTFYdjlYCjR3ZGdvRUNPN3RoNklBRTMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ3h6Q0NBYStnQXdJQkFnSUpBSVcxeUNUUkQ4OFhNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1CRXhEekFOQmdOVgpCQU1NQmxKdmIzUkRRVEFnRncweU1UQTJNakV3TURVNE1qWmFHQTh5TVRJeE1EVXlPREF3TlRneU5sb3dFVEVQCk1BMEdBMVVFQXd3R1VtOXZkRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKdUdlNWFLZUFaYUQ5OTEwWnNyYWNvalNSeEhuMUNQUUJBbkUxS3YzZ0xaOGJLekFnRkNnenRPVFBWYmwwTGZ6UApuMEtOeUZIUlV6T1ZUczdnb2RoaFFlcEVteUtYbHJVaVlnTk1vZFBJbllva3o5QzMyMlZiRGtqY2ljSk82MFVFClZzdHgrQ25NT3llanRtb3oxWmJSalkranQ0K29URzBqa05nU0NmbVBZOGl1QXpxN2VkUU1BUDljTzlsR1hTdkIKOEZ0d3IvZVVSU0M0czdNVXoxZU04VWVwZjJYU096dEhORUhoeHhOYlNCS0RrendRS0xNc2xiQksxdHhqMGsyeQozUEQ1eGRMNUQwMlQzSjUwUzIwejA4TnVjQ09xNFg0SmlTOXQ0WTVJRDFMM25zaUVaVFl5RDNiR2pSR3VFOUNrCkJuZ0ZFcEMrK0Ftb0NNZjRTdEgvZ1FJREFRQUJveUF3SGpBTUJnTlZIUk1FQlRBREFRSC9NQTRHQTFVZER3RUIKL3dRRUF3SUJoakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBbC9hN3JwQktyTVhJY0c2bWtHSVBnRC91T1luWgprKzB5dEkvdVdaY2padFhzOUFCTmpybzBPam9KZUdhNnU1UmhPUERjQWo5UDJGL2ExaURmVGVFaXl1L3QvWWxUCkVpbGRwTTBoRWtCK1JhTGM5eVZqOG9BMjZrL1J2TGFGVXhYeHZuZmxrN3pCVTJNL3haSkx4bmlWdDlxYmg3WTYKN2JSRGwrQjJwQzE1aVNqZU5mbXd0ZDBJNC9SMGpMZ2tPWWNYc09ydlVJZzFRZkRUUjhuL1VsT09udEZlQXJ3QQpHSWdnZ0czT2VOWFBvRngyY09QcWNNTlhzT3ZNZFBZUGlaVitFSjc2cXJiZ2s4SGZpd1NsdlZqdytzV1Y5dmtSCjkwL3pqLzBTQ2Ntazc4SWhYTHJCRlVVckFOY3U2RExJRGVaVitBVzN3U3FSNm40TGRyakdvdFFISVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  admin.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3I5bmU2VGNrWjZrazEKNkNoR2dMYXRHRGdMRlhhNkt4MnNnNWxOSEp3dmcxRHo4c29jSG5qZE5MWEtzcHdNOEdoak92VTc2bDhWWUlGSwpMZ2tOQUNQdHo1dlhDaTZvZmRya2FTUnVTRS8rMHVvREo5UEpiMnU3S1F4RGtEZFVDMXVlbyt0UzJQeUs4ei96CjBnZE4zOCtqQXREUy9qVjk5RTZrL05GWGNLV1E1M1JuWEhzcmtGaXNJSjNiTkplRXl4eStEZmQ2NDRkSERyVXcKYWE3bjZkL25JWlR6YlcxdFA4SHBobzI4VktJV2dQT0thaG1VU3ZRNkZ3ekU4SVAxemoxS0xFaXJwcW5pQzI3RwpvVXgxTlVRbFFyVmhvdlFpR0FaVkw3NVg0TVZ0Z0Z1Z0MxNE90UHRPa2QxczY0N2hyRTRkYkVXSmtFVzl1UC9LCkhMK3dXTWFEQWdNQkFBRUNnZ0VBZVQ5NklkbHd2eDRMYXIvN2plSjVhMGpWVXpOYUdHQUlOemcrNGprWEF3VkQKRWc2UlpRd3pTajA5Sk9PVTFpYTRZNmNSZktKL1VuSk9Gd0NvandzWFNqbUU5eldOdW0ycTVqd2dYTVlONlczTApaRmd6b3ljMXZheHVva0RRVWlrRCs3STJYWjd6U2dIRGlPWUJFbTZKVjdYSGljMkY1LzVYYVV0OVMzcjRzbGJuCmIwd1BFN1hJSVVsblIycDFubWhaZ3dEMHRTSVhqQW9hSmVRMThlLzFvZXcrSmZ4b3oyY2dGeVF5ZC9abHJkeG4KMlNLZGUrbys2ZmlxYTRoZHNjQkV3UnY2L2owRzArbVI0cU1kY0dqc1laOExTL1ZGUVFMUVhzMUF4NThvWnFMQgpOZnpYaUtqM3VCeW9EMzVESy9BanFCUnd5d2dsRDdZLzA0N2xJQVhoNFFLQmdRRGlFL3llMzVrdmQvLy9PRENyCmNpODVlK3dYa3FsYSszSjlOQ1VQVVBiVm9DSnNQSzVxZ0FPMnM1MXJMVCtMS0pENW9CQnMxWm1Ib2t2TGJIMWoKaXdpY2ZoODVZVlpkYVJvVmVOS1gxZW1jWVNFZmxNUTU4SzMwcGlwckVjUXBVd3hpNjhIeGRheUt2dW8zV29CMgpZQlo4enl6Wkh2SXRMODl0aWNXNmI1akdNd0tCZ1FEQ3VPLzR3RzlGSVhBWmZteTlXVUxsL2o5ZkZ1aWx3UzF3Cld2MWloVmxqckJOWFRldDZHdTlMZDlYc25WWnhJdmRjMjQrMEU3VGgweDBTODdveGJnNjBQWlJBdnJ6VldjY2UKUWNrWlBrSjF3NkxCNEhxSXpyZlE0N0V1Q2pmNlBFTlhnY2NscW5GTFJyVCtaV1UyekUxVzVENTBaeEVWcUY2egpsanYrRFNPT2NRS0JnRjN4a2pydWpUZ2xkRkk0cGpqSUJRbXREZ2twbjRnNERuWXFrZS9RWkJHWExsYXR6SWhpCjA2ZzY4UUlWVmw5Y0p3b2owazkzWHduMmplcGxGYUdrcDVwbjZrK3N1L2VxOGZUVU5TWjA5Rk5RSlRSN1hDTDcKZVQyOVFza2xJODlNUEV4cXpUZXAvMTNVUVgxbzlSSzdrUHlpRm0vT3BUSFR1UzA2WDlpK0FNenpBb0dCQUp4KwpBTzVMeWFFbmRHNG91cithUXplUUUrSWFDVE5kZzJVdTIwRVlwblNDVUxEemdISUx2NUZKWi9YWHBTY2IwTzBoCnorWUxpRzJOTzJxRjBuZnpXWUhsazRaTlJIbTZ3MW8veUp5dStyNm1VZUc2eFArNkV1U2dlVDdsRzRQU2R0U1gKQ2pQdFBVd2dNVW5hdDNOSTBrY28vRUNVckpoWlRuTEtKTURTVW1jaEFvR0FYZ3l5dlRtVXFNZTJNeTlyb1BYOQpFeFpmTUhvd3RVSFpNTnF0TVlmQUdkWnpwYkRsUkw5V0Y0MUJwRFJqeUhBUGxBWHo1bmRwajh5alI2WDVrbWl4CmgzU2kvSzc0K3lsaEVLZGpxM0RBZE1pNEMzRW8rSmdvQ3AzVFR0OVQwZVJqQVVFR3hSTWd4d1ZoMmxYUXNMcWIKamF3VlNMN256NjlQbExXTHU5a1VTMUU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN4ekNDQWErZ0F3SUJBZ0lKQUlXMXlDVFJEODhYTUEwR0NTcUdTSWIzRFFFQkN3VUFNQkV4RHpBTkJnTlYKQkFNTUJsSnZiM1JEUVRBZ0Z3MHlNVEEyTWpFd01EVTRNalphR0E4eU1USXhNRFV5T0RBd05UZ3lObG93RVRFUApNQTBHQTFVRUF3d0dVbTl2ZEVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnVHZTVhS2VBWmFEOTkxMFpzcmFjb2pTUnhIbjFDUFFCQW5FMUt2M2dMWjhiS3pBZ0ZDZ3p0T1RQVmJsMExmelAKbjBLTnlGSFJVek9WVHM3Z29kaGhRZXBFbXlLWGxyVWlZZ05Nb2RQSW5Zb2t6OUMzMjJWYkRramNpY0pPNjBVRQpWc3R4K0NuTU95ZWp0bW96MVpiUmpZK2p0NCtvVEcwamtOZ1NDZm1QWThpdUF6cTdlZFFNQVA5Y085bEdYU3ZCCjhGdHdyL2VVUlNDNHM3TVV6MWVNOFVlcGYyWFNPenRITkVIaHh4TmJTQktEa3p3UUtMTXNsYkJLMXR4ajBrMnkKM1BENXhkTDVEMDJUM0o1MFMyMHowOE51Y0NPcTRYNEppUzl0NFk1SUQxTDNuc2lFWlRZeUQzYkdqUkd1RTlDawpCbmdGRXBDKytBbW9DTWY0U3RIL2dRSURBUUFCb3lBd0hqQU1CZ05WSFJNRUJUQURBUUgvTUE0R0ExVWREd0VCCi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWwvYTdycEJLck1YSWNHNm1rR0lQZ0QvdU9ZbloKaysweXRJL3VXWmNqWnRYczlBQk5qcm8wT2pvSmVHYTZ1NVJoT1BEY0FqOVAyRi9hMWlEZlRlRWl5dS90L1lsVApFaWxkcE0waEVrQitSYUxjOXlWajhvQTI2ay9SdkxhRlV4WHh2bmZsazd6QlUyTS94WkpMeG5pVnQ5cWJoN1k2CjdiUkRsK0IycEMxNWlTamVOZm13dGQwSTQvUjBqTGdrT1ljWHNPcnZVSWcxUWZEVFI4bi9VbE9PbnRGZUFyd0EKR0lnZ2dHM09lTlhQb0Z4MmNPUHFjTU5Yc092TWRQWVBpWlYrRUo3NnFyYmdrOEhmaXdTbHZWancrc1dWOXZrUgo5MC96ai8wU0NjbWs3OEloWExyQkZVVXJBTmN1NkRMSURlWlYrQVczd1NxUjZuNExkcmpHb3RRSElRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-security
  namespace: monitoring
  labels:
    app: elasticsearch
data:
  config.yml: |-
    config:
      dynamic:
        # Set filtered_alias_mode to 'disallow' to forbid more than 2 filtered aliases per index
        # Set filtered_alias_mode to 'warn' to allow more than 2 filtered aliases per index but warns about it (default)
        # Set filtered_alias_mode to 'nowarn' to allow more than 2 filtered aliases per index silently
        #filtered_alias_mode: warn
        #do_not_fail_on_forbidden: false
        #kibana:
        # Kibana multitenancy
        #multitenancy_enabled: true
        #server_username: kibanaserver
        #index: '.kibana'
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: false
            internalProxies: '192\.168\.0\.10|192\.168\.0\.11' # regex pattern
            #internalProxies: '.*' # trust all internal proxies, regex pattern
            #remoteIpHeader:  'x-forwarded-for'
        authc:
          basic_internal_auth_domain:
            description: "Authenticate via HTTP Basic against internal users database"
            http_enabled: true
            transport_enabled: true
            order: 0
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: internal
          # openid_auth_domain:
          #   http_enabled: true
          #   transport_enabled: true
          #   order: 1
          #   http_authenticator:
          #     type: openid
          #     challenge: false
          #     config:
          #       subject_key: preferred_username
          #       roles_key: roles
          #       openid_connect_url: https://hdcard-sso.acloud.run/auth/realms/paas-admin/.well-known/openid-configuration
          #   authentication_backend:
          #     type: noop
        authz:
          roles_from_myldap:
            description: "Authorize via LDAP or Active Directory"
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              # LDAP authorization backend (gather roles from a LDAP or Active Directory, you have to configure the above LDAP authentication backend settings too)
              type: ldap
              config:
                # enable ldaps
                enable_ssl: false
                # enable start tls, enable_ssl should be false
                enable_start_tls: false
                # send client certificate
                enable_ssl_client_auth: false
                # verify ldap hostname
                verify_hostnames: true
                hosts:
                - localhost:8389
                bind_dn: null
                password: null
                rolebase: 'ou=groups,dc=example,dc=com'
                rolesearch: '(member={0})'
                # Specify the name of the attribute which value should be substituted with {2} above
                userroleattribute: null
                # Roles as an attribute of the user entry
                userrolename: disabled
                #userrolename: memberOf
                # The attribute in a role entry containing the name of that role, Default is "name".
                # Can also be "dn" to use the full DN as rolename.
                rolename: cn
                # Resolve nested roles transitive (roles which are members of other roles and so on ...)
                resolve_nested_roles: true
                userbase: 'ou=people,dc=example,dc=com'
                # Filter to search for users (currently in the whole subtree beneath userbase)
                # {0} is substituted with the username
                usersearch: '(uid={0})'
                # Skip users matching a user name, a wildcard or a regex pattern
                #skip_users:
                #  - 'cn=Michael Jackson,ou*people,o=TEST'
                #  - '/\S*/'
          roles_from_another_ldap:
            description: "Authorize via another Active Directory"
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              type: ldap
              #config goes here ...
          #auth_failure_listeners:
          #  ip_rate_limiting:
          #    type: ip
          #    allowed_tries: 10
          #    time_window_seconds: 3600
          #    block_expiry_seconds: 600
          #    max_blocked_clients: 100000
          #    max_tracked_clients: 100000
          #  internal_authentication_backend_limiting:
          #    type: username
          #    authentication_backend: intern
          #    allowed_tries: 10
          #    time_window_seconds: 3600
          #    block_expiry_seconds: 600
          #    max_blocked_clients: 100000
          #    max_tracked_clients: 100000
    _meta:
      type: "config"
      config_version: 2

  roles_mapping.yml: |-
    manage_snapshots:
      reserved: true
      hidden: false
      backend_roles:
      - "snapshotrestore"
      hosts: []
      users: []
      and_backend_roles: []
    logstash:
      reserved: false
      hidden: false
      backend_roles:
      - "logstash"
      hosts: []
      users: []
      and_backend_roles: []
    own_index:
      reserved: false
      hidden: false
      backend_roles: []
      hosts: []
      users:
      - "*"
      and_backend_roles: []
      description: "Allow full access to an index named like the username"
    kibana_user:
      reserved: false
      hidden: false
      backend_roles:
      - "kibanauser"
      hosts: []
      users: []
      and_backend_roles: []
      description: "Maps kibanauser to kibana_user"
    all_access:
      reserved: true
      hidden: false
      backend_roles:
      - "admin"
      hosts: []
      users: ["admin","kibana-admin@acornsoft.io"]
      and_backend_roles: []
      description: "Maps admin to all_access"
    readall:
      reserved: true
      hidden: false
      backend_roles:
      - "readall"
      hosts: []
      users: []
      and_backend_roles: []
    kibana_server:
      reserved: true
      hidden: false
      backend_roles: []
      hosts: []
      users:
      - "kibanaserver"
      and_backend_roles: []
    _meta:
      type: "rolesmapping"
      config_version: 2
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: elasticsearch
data:
  elasticsearch.yml: |-
    cluster:
      name: logging-acloud
      initial_master_nodes: ["es-master-0"]
      remote.connect: false
      routing.allocation.disk.threshold_enabled: false
    discovery:
      seed_hosts: ["es-master-0.elasticsearch-discovery.${NAMESPACE}.svc","es-client-0.elasticsearch-discovery.${NAMESPACE}.svc"]
    node:
      name: ${NODE_NAME}
      master: ${NODE_MASTER}
      data: ${NODE_DATA}
      ingest: ${NODE_INGEST}
      max_local_storage_nodes: 1
      attr.box_type: hot
      processors: ${PROCESSORS:1}
    network:
      host: 0.0.0.0
    path:
      data: /usr/share/elasticsearch/data
      logs: /usr/share/elasticsearch/logs
    http:
      compression: true
    opendistro_security.ssl.transport.pemcert_filepath: node.crt
    opendistro_security.ssl.transport.pemkey_filepath: node.key
    opendistro_security.ssl.transport.pemtrustedcas_filepath: ca.crt
    opendistro_security.ssl.transport.enforce_hostname_verification: false
    opendistro_security.ssl.transport.resolve_hostname: false
    opendistro_security.ssl.http.enabled: true
    #opendistro_security.ssl.http.clientauth_mode: REQUIRE
    opendistro_security.ssl.http.pemcert_filepath: node.crt
    opendistro_security.ssl.http.pemkey_filepath: node.key
    opendistro_security.ssl.http.pemtrustedcas_filepath: ca.crt
    opendistro_security.authcz.admin_dn: ["CN=admin"]
    opendistro_security.nodes_dn: ["CN=node"]
    opendistro_security.allow_unsafe_democertificates: false
    opendistro_security.allow_default_init_securityindex: true
    opendistro_security.enable_snapshot_restore_privilege: true
    opendistro_security.check_snapshot_restore_write_privileges: true
    opendistro_security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
    opendistro_security.audit.type: internal_elasticsearch
    opendistro_security.audit.config.disabled_rest_categories: NONE
    opendistro_security.audit.config.disabled_transport_categories: NONE
    opendistro_security.audit.log_request_body: false
    opendistro_security.audit.ignore_users: ["kibanaserver"]
    opendistro_security.roles_mapping_resolution: BOTH
  logging.yml: |-
    es.logger.level: INFO
    rootLogger: ${es.logger.level}, console
    logger:
      action: DEBUG
      com.amazonaws: WARN
    appender:
      console:
        type: console
        layout:
          type: consolePattern
          conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n"
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: elasticsearch
spec:
  #externalTrafficPolicy: Local
  ports:
    - name: http
      port: 9200
    - name: metrics
      port: 9600
    - name: rca
      port: 9650
  selector:
    app: elasticsearch
    role: client
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-discovery
  namespace: monitoring
  labels:
    app: elasticsearch
spec:
  clusterIP: None
  ports:
    - name: transport
      port: 9300
    - name: metrics
      port: 9600
    - name: rca
      port: 9650
  publishNotReadyAddresses: true
  selector:
    app: elasticsearch
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: monitoring
spec:
  #ingressClassName: "nginx"
  rules:
  - host: "elasticsearch.monitoring.svc"
    http:
      paths:
      - backend:
          serviceName: elasticsearch
          servicePort: http
        path: /
  tls:
  - hosts:
    - "elasticsearch.monitoring.svc"
    secretName: elasticsearch
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    role: master
  name: es-master
  namespace: monitoring
spec:
  serviceName: elasticsearch-discovery
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
      role: master
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: elasticsearch
        role: master
    spec:
      serviceAccountName: elasticsearch
      #affinity:
      #  nodeAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      nodeSelectorTerms:
      #        - matchExpressions:
      #            - key: node-type
      #              operator: In
      #              values:
      #                - management
      #  podAntiAffinity:
      #    preferredDuringSchedulingIgnoredDuringExecution:
      #      - weight: 1
      #        podAffinityTerm:
      #          topologyKey: "kubernetes.io/hostname"
      #          labelSelector:
      #            matchLabels:
      #              app: elasticsearch
      #tolerations:
      #  - effect: NoSchedule
      #    key: node-type
      #    operator: Equal
      #    value: management
      initContainers:
        - name: init-sysctl
          image: busybox:1.28
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
        - name: fixmount
          command: [ 'sh', '-c', 'chown -R 1000:1000 /usr/share/elasticsearch/data' ]
          image: busybox:1.28
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: data
      containers:
        - name: elasticsearch
          securityContext:
            capabilities:
              add: ["SYS_CHROOT"]
          env:
            - name: NODE_MASTER
              value: "true"
            - name: NODE_INGEST
              value: "true"
            - name: NODE_DATA
              value: "true"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROCESSORS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
            - name: ES_JAVA_OPTS
              value: "-Xms2048m -Xmx2048m"
          resources:
            limits:
              cpu: 2
              memory: 4096Mi
            requests:
              cpu: 2
              memory: 4096Mi
          image: opendistroforelasticsearch/opendistroforelasticsearch:1.9.0
          imagePullPolicy: Always
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: transport
            - containerPort: 9600
              name: metrics
            - containerPort: 9650
              name: rca
          livenessProbe:
            tcpSocket:
              port: transport
            initialDelaySeconds: 60
            periodSeconds: 10
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: data
            - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              name: config
              subPath: elasticsearch.yml
            - mountPath: /usr/share/elasticsearch/config/logging.yml
              name: config
              subPath: logging.yml
            - mountPath: /usr/share/elasticsearch/config/node.crt
              name: certs
              subPath: node.crt
            - mountPath: /usr/share/elasticsearch/config/node.key
              name: certs
              subPath: node.key
            - mountPath: /usr/share/elasticsearch/config/admin.crt
              name: certs
              subPath: admin.crt
            - mountPath: /usr/share/elasticsearch/config/admin.key
              name: certs
              subPath: admin.key
            - mountPath: /usr/share/elasticsearch/config/ca.crt
              name: certs
              subPath: ca.crt
            - mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/config.yml
              name: security-config
              subPath: config.yml
            - mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles_mapping.yml
              name: security-config
              subPath: roles_mapping.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/action_groups.yml
            #  name: security-config
            #  subPath: action_groups.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml
            #  name: security-config
            #  subPath: internal_users.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles.yml
            #  name: security-config
            #  subPath: roles.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/tenants.yml
            #  name: security-config
            #  subPath: tenants.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig
            #  name: security-config
      volumes:
        - name: config
          configMap:
            name: elasticsearch
        - name: certs
          secret:
            secretName: elasticsearch
        - name: security-config
          configMap:
            name: elasticsearch-security
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ ReadWriteOnce ]
        resources:
          requests:
            storage: 8Gi
        storageClassName: nfs-storageclass
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    role: client
  name: es-client
  namespace: monitoring
spec:
  serviceName: elasticsearch-discovery
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
      role: client
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: elasticsearch
        role: client
    spec:
      serviceAccountName: elasticsearch
      #affinity:
      #  nodeAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      nodeSelectorTerms:
      #        - matchExpressions:
      #            - key: node-type
      #              operator: In
      #              values:
      #                - management
      #  podAntiAffinity:
      #    preferredDuringSchedulingIgnoredDuringExecution:
      #      - weight: 1
      #        podAffinityTerm:
      #          topologyKey: "kubernetes.io/hostname"
      #          labelSelector:
      #            matchLabels:
      #              app: elasticsearch
      #tolerations:
      #  - effect: NoSchedule
      #    key: node-type
      #    operator: Equal
      #    value: management
      initContainers:
        - name: init-sysctl
          image: busybox:1.28
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          securityContext:
            capabilities:
              add: ["SYS_CHROOT"]
          env:
            - name: NODE_MASTER
              value: "false"
            - name: NODE_INGEST
              value: "false"
            - name: NODE_DATA
              value: "false"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROCESSORS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
            - name: ES_JAVA_OPTS
              value: "-Xms2048m -Xmx2048m"
          resources:
            limits:
              cpu: 2
              memory: 4096Mi
            requests:
              cpu: 2
              memory: 4096Mi
          image: opendistroforelasticsearch/opendistroforelasticsearch:1.9.0
          imagePullPolicy: Always
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: transport
            - containerPort: 9600
              name: metrics
            - containerPort: 9650
              name: rca
          livenessProbe:
            tcpSocket:
              port: transport
            initialDelaySeconds: 60
            periodSeconds: 10
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              name: config
              subPath: elasticsearch.yml
            - mountPath: /usr/share/elasticsearch/config/logging.yml
              name: config
              subPath: logging.yml
            - mountPath: /usr/share/elasticsearch/config/node.crt
              name: certs
              subPath: node.crt
            - mountPath: /usr/share/elasticsearch/config/node.key
              name: certs
              subPath: node.key
            - mountPath: /usr/share/elasticsearch/config/admin.crt
              name: certs
              subPath: admin.crt
            - mountPath: /usr/share/elasticsearch/config/admin.key
              name: certs
              subPath: admin.key
            - mountPath: /usr/share/elasticsearch/config/ca.crt
              name: certs
              subPath: ca.crt
            - mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/config.yml
              name: security-config
              subPath: config.yml
            - mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles_mapping.yml
              name: security-config
              subPath: roles_mapping.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/action_groups.yml
            #  name: security-config
            #  subPath: action_groups.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml
            #  name: security-config
            #  subPath: internal_users.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles.yml
            #  name: security-config
            #  subPath: roles.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/tenants.yml
            #  name: security-config
            #  subPath: tenants.yml
            #- mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig
            #  name: security-config
      volumes:
        - name: config
          configMap:
            name: elasticsearch
        - name: certs
          secret:
            secretName: elasticsearch
        - name: security-config
          configMap:
            name: elasticsearch-security
